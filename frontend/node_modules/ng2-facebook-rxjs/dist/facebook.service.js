"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var Observable_1 = require('rxjs/Observable');
var FacebookConfig = (function () {
    function FacebookConfig() {
    }
    return FacebookConfig;
}());
exports.FacebookConfig = FacebookConfig;
var FacebookService = (function () {
    function FacebookService(fb_config) {
        this._permissions = [];
        this._app_id = '';
        this._params = {
            appId: '',
            cookie: false,
            // the session
            xfbml: true,
            version: 'v2.7' // use graph api version 2.5
        };
        this.conn = FB;
        this.init(fb_config);
    }
    FacebookService.prototype.init = function (config) {
        var params = Object.assign({}, this._params, config);
        this.conn.init(params);
    };
    FacebookService.prototype.getAuthResponse = function () {
        return this.conn.getAuthResponse();
    };
    FacebookService.prototype.getLoginStatus = function (force) {
        var self = this;
        return Observable_1.Observable.create(function (observer) {
            try {
                self.conn.getLoginStatus(function (resp) {
                    if (resp.error) {
                        observer.error(resp.error);
                    }
                    else {
                        observer.next(resp);
                        observer.complete();
                    }
                }, force);
            }
            catch (error) {
                observer.error(error);
            }
            return function () {
            };
        });
    };
    FacebookService.prototype.login = function (opts) {
        var self = this;
        return Observable_1.Observable.create(function (observer) {
            try {
                self.conn.login(function (resp) {
                    if (resp.error) {
                        observer.error(resp.error);
                    }
                    else {
                        observer.next(resp);
                        observer.complete();
                    }
                }, opts);
            }
            catch (error) {
                observer.error(error);
            }
            return function () {
            };
        });
    };
    FacebookService.prototype.logout = function () {
        var self = this;
        return Observable_1.Observable.create(function (observer) {
            try {
                self.conn.logout(function (resp) {
                    if (resp.error) {
                        observer.error(resp.error);
                    }
                    else {
                        observer.next(resp);
                        observer.complete();
                    }
                });
            }
            catch (error) {
                observer.error(error);
            }
            return function () {
            };
        });
    };
    FacebookService.prototype.ui = function (params) {
        var self = this;
        return Observable_1.Observable.create(function (observer) {
            try {
                self.conn.ui(function (params, resp) {
                    if (resp.error) {
                        observer.error(resp.error);
                    }
                    else {
                        observer.next(resp);
                        observer.complete();
                    }
                });
            }
            catch (error) {
                observer.error(error);
            }
            return function () {
            };
        });
    };
    FacebookService.prototype.api = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        var self = this;
        return Observable_1.Observable.create(function (observer) {
            try {
                args[args.length + 1] = function (resp) {
                    if (resp.error) {
                        observer.error(resp.error);
                    }
                    else {
                        observer.next(resp);
                        observer.complete();
                    }
                };
                (_a = self.conn).api.apply(_a, args);
            }
            catch (error) {
                observer.error(error);
            }
            return function () {
                // clean up function
            };
            var _a;
        });
    };
    FacebookService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [FacebookConfig])
    ], FacebookService);
    return FacebookService;
}());
exports.FacebookService = FacebookService;
//# sourceMappingURL=facebook.service.js.map